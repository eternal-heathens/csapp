                            | #######################################################################
                            | # Test for copying block of size 63;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f44806000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f23f00000000000000 | 	irmovq $63, %rdx		# src and dst have 63 elements
0x014: 30f6c803000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7c001000000000000 | 	irmovq src, %rdi	# src array
0x028: 803200000000000000   | 	call ncopy		 
0x031: 00                   | 	halt			# should halt with num nonzeros in %rax
0x032:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x032:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
                            | 	### 将rmmovq %r10, (%rsi)	# ...and store it to dst移到较后的位置，消除加载/使用冒险
                            | # Loop header
0x032: 6300                 | 	xorq %rax,%rax		# count = 0;
0x034: c0f2fbffffffffffffff | 	iaddq $-5, %rdx
0x03e: 76a700000000000000   | 	jg Loop6		# if so, goto Done:
0x047: c0f20500000000000000 | 	iaddq $5, %rdx
0x051: 765b00000000000000   | 	jg Loop
0x05a: 90                   | 	ret
0x05b:                      | Loop:	
0x05b: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x065: 200e                 | 	rrmovq %rax, %r14
0x067: c0fe0100000000000000 | 	iaddq $1, %r14
0x071: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x073: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x075: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 	
0x07f: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x089: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x093: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x09d: 765b00000000000000   | 	jg Loop			# if so, goto Loop:
0x0a6: 90                   | 	ret	
                            | 
                            | 
0x0a7:                      | Loop6:	
0x0a7: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0b1: 200e                 | 	rrmovq %rax, %r14
0x0b3: c0fe0100000000000000 | 	iaddq $1, %r14
0x0bd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0bf: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x0c1: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 
0x0cb: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x0d5: 200e                 | 	rrmovq %rax, %r14
0x0d7: c0fe0100000000000000 | 	iaddq $1, %r14
0x0e1: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0e3: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x0e5: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
                            | 
0x0ef: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x0f9: 200e                 | 	rrmovq %rax, %r14
0x0fb: c0fe0100000000000000 | 	iaddq $1, %r14
0x105: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x107: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x109: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
                            | 
                            | 
0x113: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x11d: 200e                 | 	rrmovq %rax, %r14
0x11f: c0fe0100000000000000 | 	iaddq $1, %r14
0x129: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x12b: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x12d: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
                            | 
0x137: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x141: 200e                 | 	rrmovq %rax, %r14
0x143: c0fe0100000000000000 | 	iaddq $1, %r14
0x14d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x14f: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x151: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
                            | 
0x15b: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x165: 200e                 | 	rrmovq %rax, %r14
0x167: c0fe0100000000000000 | 	iaddq $1, %r14
0x171: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x173: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x175: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
                            | 	
0x17f: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x189: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
0x193: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len--
0x19d: 76a700000000000000   | 	jg Loop6			# if so, goto Loop:
0x1a6: c0f20500000000000000 | 	iaddq $5, %rdx
0x1b0: 765b00000000000000   | 	jg Loop
                            | 		
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x1b9:                      | Done:
0x1b9: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x1ba:                      | End:
                            | #/* $end ncopy-ys */
0x1ba:                      | EndFun:
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x1c0:                      | 	.align 8
0x1c0:                      | src:
0x1c0: ffffffffffffffff     | 	.quad -1
0x1c8: feffffffffffffff     | 	.quad -2
0x1d0: 0300000000000000     | 	.quad 3
0x1d8: fcffffffffffffff     | 	.quad -4
0x1e0: 0500000000000000     | 	.quad 5
0x1e8: faffffffffffffff     | 	.quad -6
0x1f0: f9ffffffffffffff     | 	.quad -7
0x1f8: f8ffffffffffffff     | 	.quad -8
0x200: 0900000000000000     | 	.quad 9
0x208: f6ffffffffffffff     | 	.quad -10
0x210: 0b00000000000000     | 	.quad 11
0x218: 0c00000000000000     | 	.quad 12
0x220: 0d00000000000000     | 	.quad 13
0x228: 0e00000000000000     | 	.quad 14
0x230: 0f00000000000000     | 	.quad 15
0x238: 1000000000000000     | 	.quad 16
0x240: 1100000000000000     | 	.quad 17
0x248: eeffffffffffffff     | 	.quad -18
0x250: 1300000000000000     | 	.quad 19
0x258: 1400000000000000     | 	.quad 20
0x260: 1500000000000000     | 	.quad 21
0x268: eaffffffffffffff     | 	.quad -22
0x270: 1700000000000000     | 	.quad 23
0x278: 1800000000000000     | 	.quad 24
0x280: e7ffffffffffffff     | 	.quad -25
0x288: e6ffffffffffffff     | 	.quad -26
0x290: 1b00000000000000     | 	.quad 27
0x298: e4ffffffffffffff     | 	.quad -28
0x2a0: e3ffffffffffffff     | 	.quad -29
0x2a8: 1e00000000000000     | 	.quad 30
0x2b0: 1f00000000000000     | 	.quad 31
0x2b8: 2000000000000000     | 	.quad 32
0x2c0: dfffffffffffffff     | 	.quad -33
0x2c8: 2200000000000000     | 	.quad 34
0x2d0: ddffffffffffffff     | 	.quad -35
0x2d8: dcffffffffffffff     | 	.quad -36
0x2e0: dbffffffffffffff     | 	.quad -37
0x2e8: daffffffffffffff     | 	.quad -38
0x2f0: 2700000000000000     | 	.quad 39
0x2f8: d8ffffffffffffff     | 	.quad -40
0x300: d7ffffffffffffff     | 	.quad -41
0x308: 2a00000000000000     | 	.quad 42
0x310: d5ffffffffffffff     | 	.quad -43
0x318: 2c00000000000000     | 	.quad 44
0x320: 2d00000000000000     | 	.quad 45
0x328: 2e00000000000000     | 	.quad 46
0x330: d1ffffffffffffff     | 	.quad -47
0x338: 3000000000000000     | 	.quad 48
0x340: cfffffffffffffff     | 	.quad -49
0x348: ceffffffffffffff     | 	.quad -50
0x350: cdffffffffffffff     | 	.quad -51
0x358: ccffffffffffffff     | 	.quad -52
0x360: 3500000000000000     | 	.quad 53
0x368: caffffffffffffff     | 	.quad -54
0x370: 3700000000000000     | 	.quad 55
0x378: c8ffffffffffffff     | 	.quad -56
0x380: 3900000000000000     | 	.quad 57
0x388: c6ffffffffffffff     | 	.quad -58
0x390: c5ffffffffffffff     | 	.quad -59
0x398: c4ffffffffffffff     | 	.quad -60
0x3a0: c3ffffffffffffff     | 	.quad -61
0x3a8: 3e00000000000000     | 	.quad 62
0x3b0: 3f00000000000000     | 	.quad 63
0x3b8: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x3c0:                      | 	.align 16
0x3c0:                      | Predest:
0x3c0: fadebc0000000000     | 	.quad 0xbcdefa
0x3c8:                      | dest:
0x3c8: abefcd0000000000     | 	.quad 0xcdefab
0x3d0: abefcd0000000000     | 	.quad 0xcdefab
0x3d8: abefcd0000000000     | 	.quad 0xcdefab
0x3e0: abefcd0000000000     | 	.quad 0xcdefab
0x3e8: abefcd0000000000     | 	.quad 0xcdefab
0x3f0: abefcd0000000000     | 	.quad 0xcdefab
0x3f8: abefcd0000000000     | 	.quad 0xcdefab
0x400: abefcd0000000000     | 	.quad 0xcdefab
0x408: abefcd0000000000     | 	.quad 0xcdefab
0x410: abefcd0000000000     | 	.quad 0xcdefab
0x418: abefcd0000000000     | 	.quad 0xcdefab
0x420: abefcd0000000000     | 	.quad 0xcdefab
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448: abefcd0000000000     | 	.quad 0xcdefab
0x450: abefcd0000000000     | 	.quad 0xcdefab
0x458: abefcd0000000000     | 	.quad 0xcdefab
0x460: abefcd0000000000     | 	.quad 0xcdefab
0x468: abefcd0000000000     | 	.quad 0xcdefab
0x470: abefcd0000000000     | 	.quad 0xcdefab
0x478: abefcd0000000000     | 	.quad 0xcdefab
0x480: abefcd0000000000     | 	.quad 0xcdefab
0x488: abefcd0000000000     | 	.quad 0xcdefab
0x490: abefcd0000000000     | 	.quad 0xcdefab
0x498: abefcd0000000000     | 	.quad 0xcdefab
0x4a0: abefcd0000000000     | 	.quad 0xcdefab
0x4a8: abefcd0000000000     | 	.quad 0xcdefab
0x4b0: abefcd0000000000     | 	.quad 0xcdefab
0x4b8: abefcd0000000000     | 	.quad 0xcdefab
0x4c0: abefcd0000000000     | 	.quad 0xcdefab
0x4c8: abefcd0000000000     | 	.quad 0xcdefab
0x4d0: abefcd0000000000     | 	.quad 0xcdefab
0x4d8: abefcd0000000000     | 	.quad 0xcdefab
0x4e0: abefcd0000000000     | 	.quad 0xcdefab
0x4e8: abefcd0000000000     | 	.quad 0xcdefab
0x4f0: abefcd0000000000     | 	.quad 0xcdefab
0x4f8: abefcd0000000000     | 	.quad 0xcdefab
0x500: abefcd0000000000     | 	.quad 0xcdefab
0x508: abefcd0000000000     | 	.quad 0xcdefab
0x510: abefcd0000000000     | 	.quad 0xcdefab
0x518: abefcd0000000000     | 	.quad 0xcdefab
0x520: abefcd0000000000     | 	.quad 0xcdefab
0x528: abefcd0000000000     | 	.quad 0xcdefab
0x530: abefcd0000000000     | 	.quad 0xcdefab
0x538: abefcd0000000000     | 	.quad 0xcdefab
0x540: abefcd0000000000     | 	.quad 0xcdefab
0x548: abefcd0000000000     | 	.quad 0xcdefab
0x550: abefcd0000000000     | 	.quad 0xcdefab
0x558: abefcd0000000000     | 	.quad 0xcdefab
0x560: abefcd0000000000     | 	.quad 0xcdefab
0x568: abefcd0000000000     | 	.quad 0xcdefab
0x570: abefcd0000000000     | 	.quad 0xcdefab
0x578: abefcd0000000000     | 	.quad 0xcdefab
0x580: abefcd0000000000     | 	.quad 0xcdefab
0x588: abefcd0000000000     | 	.quad 0xcdefab
0x590: abefcd0000000000     | 	.quad 0xcdefab
0x598: abefcd0000000000     | 	.quad 0xcdefab
0x5a0: abefcd0000000000     | 	.quad 0xcdefab
0x5a8: abefcd0000000000     | 	.quad 0xcdefab
0x5b0: abefcd0000000000     | 	.quad 0xcdefab
0x5b8: abefcd0000000000     | 	.quad 0xcdefab
0x5c0:                      | Postdest:
0x5c0: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x5c8:                      | .align 8
                            | # Run time stack
0x5c8: 0000000000000000     | 	.quad 0
0x5d0: 0000000000000000     | 	.quad 0
0x5d8: 0000000000000000     | 	.quad 0
0x5e0: 0000000000000000     | 	.quad 0
0x5e8: 0000000000000000     | 	.quad 0
0x5f0: 0000000000000000     | 	.quad 0
0x5f8: 0000000000000000     | 	.quad 0
0x600: 0000000000000000     | 	.quad 0
0x608: 0000000000000000     | 	.quad 0
0x610: 0000000000000000     | 	.quad 0
0x618: 0000000000000000     | 	.quad 0
0x620: 0000000000000000     | 	.quad 0
0x628: 0000000000000000     | 	.quad 0
0x630: 0000000000000000     | 	.quad 0
0x638: 0000000000000000     | 	.quad 0
0x640: 0000000000000000     | 	.quad 0
                            | 
0x648:                      | Stack:
