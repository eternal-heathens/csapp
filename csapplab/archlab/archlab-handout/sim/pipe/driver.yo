                            | #######################################################################
                            | # Test for copying block of size 4;
                            | #######################################################################
0x000:                      | 	.pos 0
0x000: 30f4d004000000000000 | main:	irmovq Stack, %rsp  	# Set up stack pointer
                            | 
                            | 	# Set up arguments for copy function and then invoke it
0x00a: 30f20400000000000000 | 	irmovq $4, %rdx		# src and dst have 4 elements
0x014: 30f62804000000000000 | 	irmovq dest, %rsi	# dst array
0x01e: 30f7f803000000000000 | 	irmovq src, %rdi	# src array
0x028: 803b00000000000000   | 	call ncopy		 
0x031: 808f02000000000000   | 	call check	        # Call checker code
0x03a: 00                   | 	halt                    # should halt with 0xaaaa in %rax
0x03b:                      | StartFun:
                            | #/* $begin ncopy-ys */
                            | ##################################################################
                            | # ncopy.ys - Copy a src block of len words to dst.
                            | # Return the number of positive words (>0) contained in src.
                            | #
                            | # Include your name and ID here.
                            | #
                            | # Describe how and why you modified the baseline code.
                            | #
                            | ##################################################################
                            | # Do not modify this portion
                            | # Function prologue.
                            | # %rdi = src, %rsi = dst, %rdx = len
0x03b:                      | ncopy:
                            | 
                            | ##################################################################
                            | # You can modify this portion
                            | 	# Loop header
0x03b: 6300                 | 	xorq %rax,%rax		# count = 0;
0x03d: c0f2fbffffffffffffff | 	iaddq $-5, %rdx
0x047: 766901000000000000   | 	jg Loop6		# if so, goto Done:
0x050: c0f20300000000000000 | 	iaddq $3, %rdx
0x05a: 76c300000000000000   | 	jg Loop3
0x063: c0f20200000000000000 | 	iaddq $2, %rdx
0x06d: 767700000000000000   | 	jg Loop
0x076: 90                   | 	ret
0x077:                      | Loop:	
0x077: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x081: 200e                 | 	rrmovq %rax, %r14
0x083: c0fe0100000000000000 | 	iaddq $1, %r14
0x08d: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x08f: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x091: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 	
0x09b: c0f70800000000000000 | 	iaddq $8, %rdi		# src++
0x0a5: c0f60800000000000000 | 	iaddq $8, %rsi		# dst++
0x0af: c0f2ffffffffffffffff | 	iaddq $-1, %rdx		# len--
0x0b9: 767700000000000000   | 	jg Loop			# if so, goto Loop:
0x0c2: 90                   | 	ret	
                            | 
0x0c3:                      | Loop3:	
0x0c3: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x0cd: 200e                 | 	rrmovq %rax, %r14
0x0cf: c0fe0100000000000000 | 	iaddq $1, %r14
0x0d9: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0db: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x0dd: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 
0x0e7: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x0f1: 200e                 | 	rrmovq %rax, %r14
0x0f3: c0fe0100000000000000 | 	iaddq $1, %r14
0x0fd: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x0ff: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x101: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
                            | 
0x10b: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x115: 200e                 | 	rrmovq %rax, %r14
0x117: c0fe0100000000000000 | 	iaddq $1, %r14
0x121: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x123: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x125: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
                            | 
0x12f: c0f71800000000000000 | 	iaddq $24, %rdi		# src++
0x139: c0f61800000000000000 | 	iaddq $24, %rsi		# dst++
0x143: c0f2fdffffffffffffff | 	iaddq $-3, %rdx		# len--
0x14d: 76c300000000000000   | 	jg Loop3			# if so, goto Loop:
0x156: c0f20200000000000000 | 	iaddq $2, %rdx
0x160: 767700000000000000   | 	jg Loop
                            | 
0x169:                      | Loop6:	
0x169: 50a70000000000000000 | 	mrmovq (%rdi), %r10	# read val from src...
0x173: 200e                 | 	rrmovq %rax, %r14
0x175: c0fe0100000000000000 | 	iaddq $1, %r14
0x17f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x181: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x183: 40a60000000000000000 | 	rmmovq %r10, (%rsi)	# ...and store it to dst
                            | 
0x18d: 50a70800000000000000 | 	mrmovq 8(%rdi), %r10	# read val from src...
0x197: 200e                 | 	rrmovq %rax, %r14
0x199: c0fe0100000000000000 | 	iaddq $1, %r14
0x1a3: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1a5: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x1a7: 40a60800000000000000 | 	rmmovq %r10, 8(%rsi)	# ...and store it to dst
                            | 
0x1b1: 50a71000000000000000 | 	mrmovq 16(%rdi), %r10	# read val from src...
0x1bb: 200e                 | 	rrmovq %rax, %r14
0x1bd: c0fe0100000000000000 | 	iaddq $1, %r14
0x1c7: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1c9: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x1cb: 40a61000000000000000 | 	rmmovq %r10, 16(%rsi)	# ...and store it to dst
                            | 
                            | 
0x1d5: 50a71800000000000000 | 	mrmovq 24(%rdi), %r10	# read val from src...
0x1df: 200e                 | 	rrmovq %rax, %r14
0x1e1: c0fe0100000000000000 | 	iaddq $1, %r14
0x1eb: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x1ed: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x1ef: 40a61800000000000000 | 	rmmovq %r10, 24(%rsi)	# ...and store it to dst
                            | 
0x1f9: 50a72000000000000000 | 	mrmovq 32(%rdi), %r10	# read val from src...
0x203: 200e                 | 	rrmovq %rax, %r14
0x205: c0fe0100000000000000 | 	iaddq $1, %r14
0x20f: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x211: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x213: 40a62000000000000000 | 	rmmovq %r10, 32(%rsi)	# ...and store it to dst
                            | 
0x21d: 50a72800000000000000 | 	mrmovq 40(%rdi), %r10	# read val from src...
0x227: 200e                 | 	rrmovq %rax, %r14
0x229: c0fe0100000000000000 | 	iaddq $1, %r14
0x233: 62aa                 | 	andq %r10, %r10		# val <= 0?
0x235: 26e0                 | 	cmovg %r14, %rax	# if so, goto Npos:
0x237: 40a62800000000000000 | 	rmmovq %r10, 40(%rsi)	# ...and store it to dst
                            | 	
0x241: c0f73000000000000000 | 	iaddq $48, %rdi		# src++
0x24b: c0f63000000000000000 | 	iaddq $48, %rsi		# dst++
0x255: c0f2faffffffffffffff | 	iaddq $-6, %rdx		# len--
0x25f: 766901000000000000   | 	jg Loop6			# if so, goto Loop:
0x268: c0f20300000000000000 | 	iaddq $3, %rdx
0x272: 76c300000000000000   | 	jg Loop3
0x27b: c0f20200000000000000 | 	iaddq $2, %rdx
0x285: 767700000000000000   | 	jg Loop
                            | 		
                            | 	
                            | ##################################################################
                            | # Do not modify the following section of code
                            | # Function epilogue.
0x28e:                      | Done:
0x28e: 90                   | 	ret
                            | ##################################################################
                            | # Keep the following label at the end of your function
0x28f:                      | End:
                            | #/* $end ncopy-ys */
0x28f:                      | EndFun:
                            | #################################################################### 
                            | # Epilogue code for the correctness testing driver
                            | ####################################################################
                            | 
                            | # This is the correctness checking code.
                            | # It checks:
                            | #   1. %rax has 0.  Set %rax to 0xbbbb if not.
                            | #   2. The total length of the code is less than or equal to 1000.
                            | #      Set %rax to 0xcccc if not.
                            | #   3. The source data was copied to the destination.
                            | #      Set %rax to 0xdddd if not.
                            | #   4. The words just before and just after the destination region
                            | #      were not corrupted.  Set %rax to 0xeeee if not.
                            | # If all checks pass, then sets %rax to 0xaaaa
0x28f:                      | check:
                            | 	# Return value test
0x28f: 30fa0000000000000000 | 	irmovq $0,%r10
0x299: 61a0                 | 	subq %r10,%rax
0x29b: 73b702000000000000   | 	je checkb
0x2a4: 30f0bbbb000000000000 | 	irmovq $0xbbbb,%rax  # Failed test #1
0x2ae: 70f503000000000000   | 	jmp cdone
0x2b7:                      | checkb:
                            | 	# Code length check
0x2b7: 30f08f02000000000000 | 	irmovq EndFun,%rax
0x2c1: 30f23b00000000000000 | 	irmovq StartFun,%rdx
0x2cb: 6120                 | 	subq %rdx,%rax
0x2cd: 30f2e803000000000000 | 	irmovq $1000,%rdx
0x2d7: 6102                 | 	subq %rax,%rdx
0x2d9: 75f502000000000000   | 	jge checkm
0x2e2: 30f0cccc000000000000 | 	irmovq $0xcccc,%rax  # Failed test #2
0x2ec: 70f503000000000000   | 	jmp cdone
0x2f5:                      | checkm:
0x2f5: 30f22804000000000000 | 	irmovq dest, %rdx # Pointer to next destination location
0x2ff: 30f3f803000000000000 | 	irmovq src,%rbx   # Pointer to next source location
0x309: 30f70400000000000000 | 	irmovq $4,%rdi  # Count
0x313: 6277                 | 	andq %rdi,%rdi
0x315: 737303000000000000   | 	je checkpre         # Skip check if count = 0
0x31e:                      | mcloop:
0x31e: 50020000000000000000 | 	mrmovq (%rdx),%rax
0x328: 50630000000000000000 | 	mrmovq (%rbx),%rsi
0x332: 6160                 | 	subq %rsi,%rax
0x334: 735003000000000000   | 	je  mok
0x33d: 30f0dddd000000000000 | 	irmovq $0xdddd,%rax # Failed test #3
0x347: 70f503000000000000   | 	jmp cdone
0x350:                      | mok:
0x350: 30f00800000000000000 | 	irmovq $8,%rax
0x35a: 6002                 | 	addq %rax,%rdx	  # dest ++
0x35c: 6003                 | 	addq %rax,%rbx    # src++
0x35e: 30f00100000000000000 | 	irmovq $1,%rax
0x368: 6107                 | 	subq %rax,%rdi    # cnt--
0x36a: 761e03000000000000   | 	jg mcloop
0x373:                      | checkpre:
                            | 	# Check for corruption
0x373: 30f22004000000000000 | 	irmovq Predest,%rdx
0x37d: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word before destination
0x387: 30f2fadebc0000000000 | 	irmovq $0xbcdefa, %rdx
0x391: 6120                 | 	subq %rdx,%rax
0x393: 73af03000000000000   | 	je checkpost
0x39c: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax  # Failed test #4
0x3a6: 70f503000000000000   | 	jmp cdone
0x3af:                      | checkpost:
                            | 	# Check for corruption
0x3af: 30f24804000000000000 | 	irmovq Postdest,%rdx
0x3b9: 50020000000000000000 | 	mrmovq (%rdx), %rax  # Get word after destination
0x3c3: 30f2bcfade0000000000 | 	irmovq $0xdefabc, %rdx
0x3cd: 6120                 | 	subq %rdx,%rax
0x3cf: 73eb03000000000000   | 	je checkok
0x3d8: 30f0eeee000000000000 | 	irmovq $0xeeee,%rax # Failed test #4
0x3e2: 70f503000000000000   | 	jmp cdone
0x3eb:                      | checkok:
                            | 	# Successful checks
0x3eb: 30f0aaaa000000000000 | 	irmovq $0xaaaa,%rax
0x3f5:                      | cdone:
0x3f5: 90                   | 	ret
                            | 
                            | ###############################
                            | # Source and destination blocks 
                            | ###############################
0x3f8:                      | 	.align 8
0x3f8:                      | src:
0x3f8: ffffffffffffffff     | 	.quad -1
0x400: feffffffffffffff     | 	.quad -2
0x408: fdffffffffffffff     | 	.quad -3
0x410: fcffffffffffffff     | 	.quad -4
0x418: fadebc0000000000     | 	.quad 0xbcdefa # This shouldn't get moved
                            | 
0x420:                      | 	.align 16
0x420:                      | Predest:
0x420: fadebc0000000000     | 	.quad 0xbcdefa
0x428:                      | dest:
0x428: abefcd0000000000     | 	.quad 0xcdefab
0x430: abefcd0000000000     | 	.quad 0xcdefab
0x438: abefcd0000000000     | 	.quad 0xcdefab
0x440: abefcd0000000000     | 	.quad 0xcdefab
0x448:                      | Postdest:
0x448: bcfade0000000000     | 	.quad 0xdefabc
                            | 
0x450:                      | .align 8
                            | # Run time stack
0x450: 0000000000000000     | 	.quad 0
0x458: 0000000000000000     | 	.quad 0
0x460: 0000000000000000     | 	.quad 0
0x468: 0000000000000000     | 	.quad 0
0x470: 0000000000000000     | 	.quad 0
0x478: 0000000000000000     | 	.quad 0
0x480: 0000000000000000     | 	.quad 0
0x488: 0000000000000000     | 	.quad 0
0x490: 0000000000000000     | 	.quad 0
0x498: 0000000000000000     | 	.quad 0
0x4a0: 0000000000000000     | 	.quad 0
0x4a8: 0000000000000000     | 	.quad 0
0x4b0: 0000000000000000     | 	.quad 0
0x4b8: 0000000000000000     | 	.quad 0
0x4c0: 0000000000000000     | 	.quad 0
0x4c8: 0000000000000000     | 	.quad 0
                            | 
0x4d0:                      | Stack:
