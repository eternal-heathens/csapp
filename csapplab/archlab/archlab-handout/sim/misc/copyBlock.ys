# Execution begins at address 0 
	.pos 0
	irmovq stack, %rsp  	# Set up stack pointer
	call main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
	.align 8
# Source block
src:
    .quad 0x00a
    .quad 0x0b0
    .quad 0xc00
# Destination block
dest:
    .quad 0x111
    .quad 0x222
    .quad 0x333

main:	
    irmovq src,%rdi
    irmovq dest,%rsi
    irmovq $3,%rdx
	call copy_block		# copy_block(long *src, long *dest, long len)
	ret

# long copy_block(long *src, long *dest, long len)
# src in %rdi,dest in rsi, len in rdx
copy_block:	
	xorq %rax,%rax	     # val = 0
    irmovq $8,%r8 
    irmovq $1,%r9  #$3,%rdx默认为3，所以根据guarded-do写法，省略了一个if判断
	
loop:	
    mrmovq (%rdi),%r10   # Get *start
	xorq %r10,%rax       # Add to val
    rmmovq %r10,(%rsi) #*dest++ = val;
    addq %r8,%rdi   # Get  next start
    addq %r8,%rsi   # Get  next dest
    subq %r9,%rdx   # len --
    andq   %rdx,%rdx     # if 0
    jne loop
test:	
    ret                  # Return

# Stack starts here and grows to lower addresses
	.pos 0x200
stack:
